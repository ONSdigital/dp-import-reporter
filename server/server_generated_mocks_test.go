// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package server

import (
	"sync"
)

// Ensure, that ClearableCacheMock does implement ClearableCache.
// If this is not the case, regenerate this file with moq.
var _ ClearableCache = &ClearableCacheMock{}

// ClearableCacheMock is a mock implementation of ClearableCache.
//
// 	func TestSomethingThatUsesClearableCache(t *testing.T) {
//
// 		// make and configure a mocked ClearableCache
// 		mockedClearableCache := &ClearableCacheMock{
// 			ClearFunc: func()  {
// 				panic("mock out the Clear method")
// 			},
// 		}
//
// 		// use mockedClearableCache in code that requires ClearableCache
// 		// and then make assertions.
//
// 	}
type ClearableCacheMock struct {
	// ClearFunc mocks the Clear method.
	ClearFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Clear holds details about calls to the Clear method.
		Clear []struct {
		}
	}
	lockClear sync.RWMutex
}

// Clear calls ClearFunc.
func (mock *ClearableCacheMock) Clear() {
	if mock.ClearFunc == nil {
		panic("ClearableCacheMock.ClearFunc: method is nil but ClearableCache.Clear was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClear.Lock()
	mock.calls.Clear = append(mock.calls.Clear, callInfo)
	mock.lockClear.Unlock()
	mock.ClearFunc()
}

// ClearCalls gets all the calls that were made to Clear.
// Check the length with:
//     len(mockedClearableCache.ClearCalls())
func (mock *ClearableCacheMock) ClearCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClear.RLock()
	calls = mock.calls.Clear
	mock.lockClear.RUnlock()
	return calls
}
