// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package message

import (
	"context"
	kafka "github.com/ONSdigital/dp-kafka/v2"
	"sync"
)

// Ensure, that ReceiverMock does implement Receiver.
// If this is not the case, regenerate this file with moq.
var _ Receiver = &ReceiverMock{}

// ReceiverMock is a mock implementation of Receiver.
//
// 	func TestSomethingThatUsesReceiver(t *testing.T) {
//
// 		// make and configure a mocked Receiver
// 		mockedReceiver := &ReceiverMock{
// 			ProcessMessageFunc: func(ctx context.Context, event kafka.Message) error {
// 				panic("mock out the ProcessMessage method")
// 			},
// 		}
//
// 		// use mockedReceiver in code that requires Receiver
// 		// and then make assertions.
//
// 	}
type ReceiverMock struct {
	// ProcessMessageFunc mocks the ProcessMessage method.
	ProcessMessageFunc func(ctx context.Context, event kafka.Message) error

	// calls tracks calls to the methods.
	calls struct {
		// ProcessMessage holds details about calls to the ProcessMessage method.
		ProcessMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Event is the event argument value.
			Event kafka.Message
		}
	}
	lockProcessMessage sync.RWMutex
}

// ProcessMessage calls ProcessMessageFunc.
func (mock *ReceiverMock) ProcessMessage(ctx context.Context, event kafka.Message) error {
	if mock.ProcessMessageFunc == nil {
		panic("ReceiverMock.ProcessMessageFunc: method is nil but Receiver.ProcessMessage was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Event kafka.Message
	}{
		Ctx:   ctx,
		Event: event,
	}
	mock.lockProcessMessage.Lock()
	mock.calls.ProcessMessage = append(mock.calls.ProcessMessage, callInfo)
	mock.lockProcessMessage.Unlock()
	return mock.ProcessMessageFunc(ctx, event)
}

// ProcessMessageCalls gets all the calls that were made to ProcessMessage.
// Check the length with:
//     len(mockedReceiver.ProcessMessageCalls())
func (mock *ReceiverMock) ProcessMessageCalls() []struct {
	Ctx   context.Context
	Event kafka.Message
} {
	var calls []struct {
		Ctx   context.Context
		Event kafka.Message
	}
	mock.lockProcessMessage.RLock()
	calls = mock.calls.ProcessMessage
	mock.lockProcessMessage.RUnlock()
	return calls
}
